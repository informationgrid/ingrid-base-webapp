<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">


	<!--
		the application context definition for the springapp DispatcherServlet
	-->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView"></property>
		<property name="prefix" value="/WEB-INF/jsp/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>

	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:messages_base</value>
			</list>
		</property>
		<property name="cacheSeconds" value="0" />
		<property name="fallbackToSystemLocale" value="false"></property>
		<property name="defaultEncoding">
			<value>UTF-8</value>
		</property>
	</bean>

	<!--
		XML DEFINED BEANS WITH ACCORDING QUALIFIER TO BE AUTOWIRED VIA
		QUALIFIER !
	-->

	<!--
		Single parsers are injected explicitly (but created via annotation
		mechanism)
	-->
	<!-- Adapt number, type and order of parsers dependent from iPlug -->
	<bean class="de.ingrid.admin.search.QueryParsers">
		<qualifier value="XMLconfigured" />
		<property name="queryParsers">
			<list>
				<ref bean="contentQueryParser" />
				<!-- NO datatype added to lucene query ? -->
				<!-- ref bean="dataTypeQueryParser" /-->
				<ref bean="titleQueryParser" />
				<ref bean="fieldQueryParser" />
				<ref bean="rangeQueryParser" />
				<ref bean="wildCardFieldQueryParser" />
				<ref bean="allResultsOnEmptyQueryParser" />
			</list>
		</property>
	</bean>

	<!--
		Wraps one ore more lucene index reader. The wrapper is injected via
		XMLconfiguredIndexWrapper into IngridIndexSearcher constructor, so it
		can be updated in the configure phase.
	-->
	<bean id="indexWrapper" class="de.ingrid.search.utils.LuceneIndexReaderWrapper">
		<qualifier value="XMLconfiguredIndexWrapper" />
	</bean>

	<bean id="facetClassProducer" class="de.ingrid.search.utils.facet.FacetClassProducer">
		<property name="indexReaderWrapper">
			<ref bean="indexWrapper" />
		</property>
		<property name="queryParsers">
			<ref bean="de.ingrid.admin.search.QueryParsers" />
		</property>
	</bean>

	<bean id="facetClassRegisty" class="de.ingrid.search.utils.facet.FacetClassRegistry">
		<property name="facetClassProducer">
			<ref bean="facetClassProducer" />
		</property>
	</bean>

	<bean id="indexFacetCounter" class="de.ingrid.search.utils.facet.counter.IndexFacetCounter">
		<property name="facetClassRegistry">
			<ref bean="facetClassRegisty" />
		</property>
	</bean>

	<!--
		Wraps a plugdescription object. The wrapper implements IConfigurable
		and will be updated every time the configure phase takes place (i.e.
		after changing the iplug configuration).
	-->
	<bean id="plugDescriptionWrapper"
		class="de.ingrid.search.utils.ConfigurablePlugDescriptionWrapper" />

	<bean id="plugDescriptionFacetCounter"
		class="de.ingrid.search.utils.facet.counter.DscPlugdescriptionFacetCounter">
		<property name="plugDescriptionWrapper">
			<ref bean="plugDescriptionWrapper" />
		</property>
	</bean>

	<bean id="facetManager" class="de.ingrid.search.utils.facet.FacetManager">
		<property name="indexReaderWrapper">
			<ref bean="indexWrapper" />
		</property>
		<property name="queryParsers">
			<ref bean="de.ingrid.admin.search.QueryParsers" />
		</property>
		<property name="facetCounters">
			<list>
				<ref bean="plugDescriptionFacetCounter" />
				<ref bean="indexFacetCounter" />
			</list>
		</property>
	</bean>
	
	
	
	<!--
		enable Auto-detecting of components (annotation based configuration
		including autowire ...)
	-->
	<context:component-scan base-package="de.ingrid">
		<!--
			EXAMPLE for including/excluding stuff ! These ones then should not be
			part of autowire !
		-->
		<!--
			context:include-filter type="regex" expression=".*Stub.*Repository"/
		-->
		<!--
			context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Repository"/
		-->
	</context:component-scan>

</beans>